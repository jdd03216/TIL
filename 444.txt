보조강의 듣고 피피티 짧게

>>>>루비
>>>>영어문장처럼 되어있어서 보기 편함
>>>>쓰기 쉬움

베쉬 죽으면 콘트롤 c나 오른쪽 클릭
배쉬에서 전에꺼 쓸때 방향표 위만 누르면 됨

콘트롤러 mom >>변수 줄 때 arried

() {} [] >>>모두 다른 상황에서 쓴다.

배열을 쓸 때는 []

글자쓸때 ""를 넣으면 숫자를 써도 글자로 받아드림

변수=콘트롤러 안의 @
변수>>중복된 변수이름은 사용 x
	_빼고는 특수문자를 사용할 수 없음
	띄어쓰기 대용으로 _ >> 숫자 쓰고 싶으면 _123으로 쓴다
	숫자로 시작하는 변수명 사용 x
	길이 제한 x
	키워드를 변수명으로 사용 x >>헷갈립니다

puts를 꼭 붙여아 커맨드창에 나타남

텅빈 c9은 파일명에 루비는 -rb등을 쓰고
베쉬에 ruby 파일명.확장자명을 쓰면 쓸 수 있다.

-------------------------------------------

number >>숫자
	사칙연산 가능
	사칙연산 번호는 띄워주자
	/ = 나눗셈의 몫
	% = 나눗셈의 나머지

string >>문자
	something.method
	무언가.행동
	주어.동사

.length >>글자수
.reverse >>반대로
.upcase >>모두 소문자로
.downcase >>모두 대문자로
.sort >>순서대로 정렬
.times >>반복시킨다
.each >>반복시킨다

.sample >>어레이 중 하나를 랜덤으로 하나 뽑겠다
 >>>sample(3)하면 샘플 3개를 랜덤으로 뽑는다

.include? >>포함하는가에 참거짓을 출력
 >>>puts ["a","b","c","d","e"].include?("a")

.to_i >>숫자로 바꾸고 싶다
.to_a >>배열로 바꾸고 싶다
.to_s >>문자열로 바꾸고 싶다

boolean >>참거짓
	== 같다
	=! 같지 않다
	
	&& = and
	|| = or
	! = not

-------------------------------------------

if  >> 한번만 쓸 수 있음
 elsif  >> 계속 쓸 수 있음
 else  >> 한번만 쓸 수 있음
	> 마지막 else는 조건이 없다
end

unless  >>if의 반대>>많이 쓰지 않음
else

case  >>>이걸 많이 쓰자
 when
 when
 when
 else
end

>>>비교표는 쓰지 않는다.
>>>..과 ...만 쓴다.
>>>이렇게 쓴다
print "what is your grade: "
old = gets.chomp.to_i> .to_i는 변수를 정수로 만든다.

case old
when 17
    puts "you are palutpalut"
when 15..16  >>>15,16으로 해도 가능
    puts "hi there"
when 12..14  >>>두개 같이 해도 인식함
    puts "hi sir"
else 
    puts "oh god"
end

--------------------------------------------

print  >>옆에 쭈르륵 붙어서 보인다
	같은 줄에서 입력을 받아야 할 때는 print

print "hi/n"  >>/n는 엔터와 같은 효과를 줌
=puts "hi"   >>>같은 결과가 나옴

puts   >>줄이 나뉜다
	왠만하면 푸츠를 쓰는 것이 좋다

--------------------------------------------

gets.chomp  >>>.chomp는 메쏘드임

1...5 >>>1,2,3,4 >>소수점을 포함한다.
1..5 >>>1,2,3,4,5 >>소수점을 포함한다.

&& = and >>트루가 1
|| = or  >>트루가 3
! = not  >>반대   >>잘 안쓰임
>>>>>>>>참거짓을 사용하는 이유.
	조건문에 사용하기 위해

-------------------------------------------

# 나는 주석입니다.

=begin             >>>거의 사용하지 않음
나는 주석입니다
=end

--------------------------------------------

반복문 


while  ~동안, 모두 포함
==============================
while '' do >>>>요런 형식
end
----------------------------
while false do
	puts 'Hellw World' >>>print를 쓰면 옆으로 계속 나온다.
end                        >>>없으면 무한루프
puts '안녕하세요.'
-----------------------------
i = 0          >>>숫자는 0부터 0,1,2 >>>3번 나온다.
while i<3 do
    puts 'Hello World'
    i = i + 1  >>>오른쪽의 값을 왼쪽에 넣겠다.
end            >>>루프에서 나온다
>>>hello world 세번 나옴
-----------------------------
i = 1
while i <= 10 do
    puts i              >>>정수 취급
    i += 1              >>>i = i + 1의 축약형
end
------------------------------
i = 1
while i <= 10 do
    puts "숫자 #{i}를 출력합니다."  >>>#{i}는 문자열에 정수를 쓰고 싶을 때 사용한다.
    i += 1
end
------------------------------


until  ~까지, 마지막 수를 포함하지 않음
===================================
i = 1
until i == 11   >>>11은 포함되지 않음
    puts i
    i += 1
end
------------------------------


for
================================
i = 1
for i in 1..10   
    puts "#{i}"
		>>>or
		>>>puts i
end
------------------------------


loop
==============================
i = 0
loop do
    i += 1
    puts i
    break if i== 10    >>>반복문을 깸
end
------------------------------


(반복할 횟수).times do   >>>대부분 타임즈를 씀
(반복할 것들)
end
==============================
10.times do |i|   >>>버티컬바에 꼭 넣어야 한다.
    puts i           *변수선언을 해줌*
end
>>>>9까지만 나온다 cuz 0부터 세기 때문에
--------------------------------
i = 10
10.times do 
    i +=1
    puts i
end
----------------------------------


함수  >>>재활용성 향상
	중복 제거, 가독성 증가, 수정 편리

def function()  >>펑션이라는 함수를 만듦
  puts "hello"  >>함수의 액션
end

def function2()
  return "hello"  >>리턴을 만나면 함수가 끝난다
		  >>함수의 끝맺음을 위한 것
		  >>end와 같이 쓰인다.
end
----------------------------------
def func1()
    a = 1 + 3
    puts a    
end

func1       >>>>문자화 됨
----------------------
def func2()
    a = 1 + 3
    return a
end

func2()       >>>정수로 쓸 수 있음
------------------------------
def func1(a)
    b = a + 3
    puts b
end

func1(3)      >>>이렇게 한 식을 가지고 다른 값을 낼 수 있다. 이렇게 사용한다.
-------------------------------
def func1(a, b)
    c = a + b
    puts c
end

func1(a, b)
---------------------------------
이것을 줄이면

def func1
    "hello"
end
			>>>but 많이 쓰지 말자
func1                   >>>이렇게 줄일 수 있다.
--------------------------------
오른쪽에서 왼쪽으로 넣는다.


블록
function() {블록}
function=  {블록}

array = [ "ruby" , "diamond", "emerald" ]
hash = {0=> "ruby", 1=> "diamond", 2=> "emerald"}
      key=>value
      >>숫자, 문자, 참거짓 모두 사용 가능
		    >>>참거짓은 따음표 x

해쉬를 만드는 방법  >>>두번째꺼가 정석
1) my_hash = { "bacon" => 1, "eggs" => 2 }
2) my_hash = Hash.new   >>루비 문법:Hash는 꼭 첫글자 대문자 .new는 새로 만든다는 메쏘드. 
   my_hash["bacon"] = 1
   my_hash["eggs"] = 2
------------------------------
a = {""=>"", ""=>"", ""=>""}

a.each do |key, value|
  puts value   >>>바꿀 수 있다
end

a.each do |key, value|
  puts "#{key} is my #{value}"
end

---------------------------------------------

symbol
콜론을 붙인 글자

:my sym (x)
:my_sym (0)

한번 생성되면 변경이 불가능함
문자열을 재사용 >> 메모리 절약
위의 2가지 이유로 스트링(문자열)보다 더 빠름

>>>스트링은 3개 있으면 박스가 3개. 찾는 시간도 걸리고 만드는 시간도 걸린다.
>>>심볼은 3개 있으면 박스가 1개. 찾는 시간도 줄어들고 만드는 시간도 줄어든다.

>>>hash에 (키에) 적용하기 위해 쓴다.
>>>hash의 key는 symbol로 되어있다.

hash= {one: 1, two: 2, three:3}

symbol > string
string.to_s

string > symbol
string:my_sym

-------------------------------

c9 >>>  app  >>>assets
>>>>>>>>>>>>>>>>>>>>>>중요한 파일
------------------------------
def index
     @my_list = ["haha","on_no"]
     @my_pick = @my_list.sample
     @my_img  = @my_pick + ".jpg"
end
-------------------------------
<p><%=@my_list%></p>
<h1><%=@my_pick%></h1>

<%= image_tag @my_img %>
-------------------------------

어레이, 헤쉬
정말 많이 봐야합니다!
>>>>>ruby doc

irb
>>>커멘드 상에서 바로 볼 수 있다.
>>>한 줄 짜리 코드를 확인할 때

로또 폴더를 만들어 깃 허브에 저장한다.














